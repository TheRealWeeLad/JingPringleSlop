// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

static const float GRAVITY = -1;
static const float3 UP = float3(0, 1, 0);

float deltaTime;
float2 xRange;
float2 yRange;
float2 zRange;
float size;
float frictionStrength;
float mass;
float mostEffectiveDistance;
float steepness;
float stability;

struct ParticleData
{
    float3 pos;
    float3 vel;
};

RWStructuredBuffer<ParticleData> Particles;

float Magnitude(float3 vec)
{
    return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

bool3 InRange(float3 pos, float3x2 range)
{
    bool x = pos.x > range._11 && pos.x < range._12;
    bool y = pos.y > range._21 && pos.y < range._22;
    bool z = pos.z > range._31 && pos.z < range._32;
    return bool3(x, y, z);
}

void CollideWithBox(ParticleData part)
{
    // Check if particle in box
    float3x3 dir = float3x3(1, 0, 0, 0, 1, 0, 0, 0, 1); // 3x3 identity
    bool3 inRange = InRange(part.pos, float3x2(xRange, yRange, zRange));
    if (!inRange.x)
        dir._11 = -1;
    if (!inRange.y)
        dir._22 = -1;
    if (!inRange.z)
        dir._33 = -1;
    // Assume perfectly elastic collisions
    part.vel = mul(part.vel, dir);
}

float PotentialStrength(float r, float r0)
{
    // Potential Energy Function
    // float strength = stability * pow(1 - exp(-steepness * r), 2) / r;
        
    // F = -dU/dr, force is negative derivative of potential energy
    return -(2 * stability * steepness * (1 - exp(-steepness * (r - r0))) * exp(-steepness * (r - r0))) / r + stability * pow(1 - exp(-steepness * (r - r0)), 2) / r / r;
}

[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    ParticleData part = Particles[id.x];
    
    // Apply Attractive Forces
    uint length;
    uint _;
    Particles.GetDimensions(length, _);
    
    float3 acceleration = GRAVITY * UP;
    for (uint i = 0; i < length; i++)
    {
        ParticleData otherPart = Particles[i];
        bool3 samePart = otherPart.pos == part.pos;
        if (all(otherPart.pos == part.pos))
            continue;
        
        // Get attracted to other particles based on distance
        float3 direction = part.pos - otherPart.pos;
        float distance = Magnitude(direction);
        direction = normalize(direction);
        
        // Morse Potential
        float strength = PotentialStrength(distance, mostEffectiveDistance) / mass;
        acceleration += strength * direction;
    }
    
    // Simulate Friction
    if (!all(part.vel == float3(0, 0, 0))) acceleration += frictionStrength * -normalize(part.vel);
    
    // Update Velocity based on Acceleration
    part.vel += acceleration * deltaTime;
    
    // Check if particle in box
    float3x3 dir = float3x3(1, 0, 0, 0, 1, 0, 0, 0, 1); // 3x3 identity
    float3x2 range = float3x2(xRange, yRange, zRange);
    bool3 inRange = InRange(part.pos, range);
    if (!inRange.x)
        dir._11 = -1;
    if (!inRange.y)
        dir._22 = -1;
    if (!inRange.z)
        dir._33 = -1;
    // Assume perfectly elastic collisions
    part.vel = mul(part.vel, dir);
    
    // Update position based on velocity
    part.pos += part.vel * deltaTime;
    
    // Clamp Particle position to box
    part.pos = clamp(part.pos, range._11_21_31, range._12_22_32);
    
    Particles[id.x] = part;
}